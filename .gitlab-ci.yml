include:
  - project: "devops/gitlab/ci-templates/docker"
    ref: "multistage"
    file:
      - ".build_docker_image.yml"
      - ".push_docker_image.yml"
      - ".remove_docker_image.yml"
      - ".remove_docker_image_from_registry.yml"
  - project: "devops/gitlab/ci-templates/ruby"
    ref: "sans-dind"
    file: 
      - ".rspec.yml"
      - ".rubocop.yml"
  - project: "devops/gitlab/ci-templates/sast"
    ref: "master"
    file:
      - ".trivy_container_scanning.yml"
  - template: "Workflows/MergeRequest-Pipelines.gitlab-ci.yml"

stages:
  - build_and_push:tmp_base_image
  - build_and_push:tmp_dev_image
  - build_and_push:tmp_solr_image
  - test
  - build_and_push:tmp_prod_image
  - sast
  - remove:tmp_images_from_registry
  - push:final_images
  - deploy
  - remove:tmp_images_from_host

# -- Start - build and push base image
build_base_app_image:
  stage: build_and_push:tmp_base_image
  extends:
    - .build_docker_image
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    DOCKER_BUILD_CONTEXT: "ansible/roles/finding_aid_discovery/files/src/"
    DOCKER_TARGET: "base"
    DOCKERFILE_PATH: "ansible/roles/finding_aid_discovery/files/src/"
  tags:
    - build

push_tmp_base_app_image_to_registry:
  stage: build_and_push:tmp_base_image
  extends:
    - .push_docker_image
  needs:
    - build_base_app_image
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    DOCKER_IMAGE_NAME: "${CI_PIPELINE_ID}"
    DOCKER_TARGET: "base"
    IMAGE_TAGS: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
  tags:
    - build
# -- End - build and push base image

# -- Start - build, push temp dev image
build_dev_app_image:
  stage: build_and_push:tmp_dev_image
  extends:
    - .build_docker_image
  variables:
    BASE_IMAGE_CACHE_TAG: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-base
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    DOCKER_BUILD_ARGS: "--build-arg RAILS_ENV=development"
    DOCKER_BUILD_CONTEXT: "ansible/roles/finding_aid_discovery/files/src/"
    DOCKER_TARGET: "development"
    DOCKERFILE_PATH: "ansible/roles/finding_aid_discovery/files/src/"
  needs:
    - push_tmp_base_app_image_to_registry
  tags:
    - build

push_tmp_dev_app_image_to_registry:
  stage: build_and_push:tmp_dev_image
  extends:
    - .push_docker_image
  needs:
    - build_dev_app_image
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    DOCKER_IMAGE_NAME: "${CI_PIPELINE_ID}"
    DOCKER_TARGET: "development"
    IMAGE_TAGS: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
  tags:
    - build
# -- End - build, push temp dev image

# -- Start - build and push temp solr image
build_solr_image:
  stage: build_and_push:tmp_solr_image
  extends:
    - .build_docker_image
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-solr
    DOCKER_BUILD_CONTEXT: "ansible/roles/solr/files/src/"
    DOCKERFILE_PATH: "ansible/roles/solr/files/src/"
  tags:
    - build

push_tmp_solr_image_to_registry:
  stage: build_and_push:tmp_solr_image
  extends:
    - .push_docker_image
  needs:
    - build_solr_image
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-solr
    DOCKER_IMAGE_NAME: "${CI_PIPELINE_ID}"
    IMAGE_TAGS: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-solr
  tags:
    - build
# -- End - build and push temp solr image

# -- Start - test dev image
rspec_app_test:
  stage: test
  image: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-development
  services:
    - name: browserless/chrome:1.50-chrome-stable
      alias: chrome
    - postgres:14
    - name: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-solr
      alias: solr
  extends:
    - .rspec
  variables:
    CHROME_URL: "http://chrome:3000"
    CONFIG_LOCATION: "/finding_aid_discovery_configs"
    CORE_NAME: "finding-aid-discovery-core"
    DATABASE_NAME: "finding_aid_discovery"
    DATABASE_PASSWORD: "rspec_test"
    DATABASE_USER: "rspec_test"
    FF_NETWORK_PER_BUILD: "true"
    POSTGRES_DB: "finding_aid_discovery"
    POSTGRES_PASSWORD: "rspec_test"
    POSTGRES_USER: "rspec_test"
    RAILS_ENV: "test"
    RAILS_SYSTEM_TESTING_SCREENSHOT_HTML: "1"
    SOLR_URL: "http://solr:8983/solr/finding-aid-discovery-core"
  script:
    - cd ${CI_PROJECT_DIR}/ansible/roles/finding_aid_discovery/files/src/
    - bundle add rspec_junit_formatter
    - bundle exec rake db:migrate
    - bundle exec rspec --format progress --format RspecJunitFormatter --out rspec.xml
  needs:
    - push_tmp_dev_app_image_to_registry
    - push_tmp_solr_image_to_registry
  coverage: '/\(\d+.\d+\%\) covered/'
  artifacts:
    paths:
      - ansible/roles/finding_aid_discovery/files/src/tmp/coverage/index.html
      - ansible/roles/finding_aid_discovery/files/src/tmp/capybara
      - ansible/roles/finding_aid_discovery/files/src/rspec.xml
    expire_in: 1 week
    reports:
      junit: ansible/roles/finding_aid_discovery/files/src/rspec.xml
  rules:
    - if: $DISABLE_RSPEC_TEST == "true"
      when: never
    - exists:
        - ansible/roles/finding_aid_discovery/files/src/spec/**.rb
        - ansible/roles/finding_aid_discovery/files/src/spec/**/**.rb
  tags:
    - build

rubocop_app_test:
  stage: test
  image: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-development
  needs:
    - push_tmp_dev_app_image_to_registry
  extends:
    - .rubocop
  before_script:
    - cd ansible/roles/finding_aid_discovery/files/src/
  rules:
    - if: $DISABLE_RUBOCOP == "true"
      when: never
    - exists:
        - ansible/roles/finding_aid_discovery/files/src/.rubocop.yml
  tags:
    - build
# -- End - test dev image

# -- Start - build and push temp prod image
build_prod_app_image:
  stage: build_and_push:tmp_prod_image
  extends:
    - .build_docker_image
  variables:
    BASE_IMAGE_CACHE_TAG: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-base
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    DOCKER_BUILD_ARGS: "--build-arg RAILS_ENV=production"
    DOCKER_BUILD_CONTEXT: "ansible/roles/finding_aid_discovery/files/src/"
    DOCKER_TARGET: "production"
    DOCKERFILE_PATH: "ansible/roles/finding_aid_discovery/files/src/"
  needs:
    - rspec_app_test
    - rubocop_app_test
  tags:
    - build

push_tmp_prod_app_image_to_registry:
  stage: build_and_push:tmp_prod_image
  extends:
    - .push_docker_image
  needs:
    - build_prod_app_image
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    DOCKER_IMAGE_NAME: "${CI_PIPELINE_ID}"
    DOCKER_TARGET: "production"
    DOCKERFILE_PATH: "ansible/roles/finding_aid_discovery/files/src/"
    IMAGE_TAGS: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
  tags:
    - build
# -- End - build and push temp prod image

# -- Start - SAST images
# Test application image
trivy_app_container_scanning:
  stage: sast
  extends:
    - .trivy_container_scanning
  before_script:
    - apk add --no-cache docker
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  after_script:
    - docker logout ${CI_REGISTRY}
  needs:
    - push_tmp_prod_app_image_to_registry
  variables:
    CI_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-production
  tags:
    - build
  allow_failure: true

# Test solr image
trivy_solr_container_scanning:
  stage: sast
  extends:
    - .trivy_container_scanning
  before_script:
    - apk add --no-cache docker
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  after_script:
    - docker logout ${CI_REGISTRY}
  needs:
    - rspec_app_test
  variables:
    CI_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-solr
  tags:
    - build
  allow_failure: true
# -- End - SAST images

# -- Start - Remove temp images from registry
remove_tmp_dev_app_image_from_registry:
  stage: remove:tmp_images_from_registry
  extends:
    - .remove_docker_image_from_registry
  variables:
    IMAGE_TAG: ${CI_PROJECT_PATH}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-development
  rules:
    - when: always
  needs:
    - rspec_app_test
    - rubocop_app_test
  tags:
    - build
  allow_failure: true

remove_tmp_prod_app_image_from_registry:
  stage: remove:tmp_images_from_registry
  extends:
    - .remove_docker_image_from_registry
  variables:
    IMAGE_TAG: ${CI_PROJECT_PATH}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-production
  rules:
    - when: always
  needs:
    - trivy_app_container_scanning
  tags:
    - build
  allow_failure: true

remove_tmp_solr_image_from_registry:
  stage: remove:tmp_images_from_registry
  extends:
    - .remove_docker_image_from_registry
  variables:
    IMAGE_TAG: ${CI_PROJECT_PATH}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-solr
  rules:
    - when: always
  needs:
    - trivy_solr_container_scanning
  tags:
    - build
  allow_failure: true

remove_tmp_base_app_image_from_registry:
  stage: remove:tmp_images_from_registry
  extends:
    - .remove_docker_image_from_registry
  variables:
    IMAGE_TAG: ${CI_PROJECT_PATH}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-base
  rules:
    - when: always
  needs:
    - build_dev_app_image
    - build_prod_app_image
  tags:
    - build
  allow_failure: true

remove_tmp_container_registry:
  stage: remove:tmp_images_from_registry
  image: bash
  before_script:
    - apk add --no-cache curl jq
  script:
    - >
      results=($(curl -H "JOB-TOKEN:${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories?tags_count=true" | jq '.[] | select(.name=="'"${CI_PIPELINE_ID}"'") | [.id,.tags_count]' | tr -d '[]," '))
    - repository_id=${results[0]}
    - tags_count=${results[1]}
    - >
      if [ -n "${repository_id}" ] && [ -n "${tags_count}" ] && [ "${tags_count}" -eq "0" ]; then
        curl --request DELETE -H "JOB-TOKEN:${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories/${repository_id}"
      fi
  rules:
    - when: always
  needs:
    - remove_tmp_base_app_image_from_registry
    - remove_tmp_dev_app_image_from_registry
    - remove_tmp_prod_app_image_from_registry
    - remove_tmp_solr_image_from_registry
  allow_failure: true
  tags:
    - build
# -- End - Remove temp images from registry

# -- Start - push final images to registry
push_base_app_image_to_registry:
  stage: push:final_images
  extends:
    - .push_docker_image
  needs:
    - remove_tmp_base_app_image_from_registry
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    DOCKER_IMAGE_NAME: "app"
    DOCKER_TARGET: "base"
  tags:
    - build

push_dev_app_image_to_registry:
  stage: push:final_images
  extends:
    - .push_docker_image
  needs:
    - remove_tmp_dev_app_image_from_registry
    - rspec_app_test
    - rubocop_app_test
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    DOCKER_IMAGE_NAME: "app"
    DOCKER_TARGET: "development"
  tags:
    - build

push_prod_app_image_to_registry:
  stage: push:final_images
  extends:
    - .push_docker_image
  needs:
    - remove_tmp_prod_app_image_from_registry
    - trivy_app_container_scanning
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    DOCKER_IMAGE_NAME: "app"
    DOCKER_TARGET: "production"
    TAG_IMAGE_WITH_TARGET: "false"
  tags:
    - build

push_solr_image_to_registry:
  stage: push:final_images
  extends:
    - .push_docker_image
  needs:
    - remove_tmp_solr_image_from_registry
    - trivy_solr_container_scanning
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-solr
    DOCKER_IMAGE_NAME: "solr"
  tags:
    - build
# -- End - push final images to registry

# -- Start - deployment
.deploy: &deploy
  image: gitlab.library.upenn.edu/docker/hvas:master
  cache: []
  before_script:
    # Create onetime key pair
    - ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -P ""

    # Get Vault token via JWT auth locked to this project
    - export VAULT_ADDR=${VAULT_URL}
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/${CI_SERVER_HOST}/login role=${CI_PROJECT_NAMESPACE}-${CI_PROJECT_NAME}-${DEPLOY_ENVIRONMENT} jwt=${CI_JOB_JWT})"

    # Generate signed key and write to a new pub key
    - vault write -field=signed_key ${VAULT_SSH_CLIENT_ENDPOINT}/sign/${VAULT_SSH_CLIENT_ROLE} public_key=@${HOME}/.ssh/id_ed25519.pub valid_principals=${VALID_PRINCIPALS} > ~/.ssh/id_ed25519-cert.pub
    - chmod 0400 ~/.ssh/id_ed25519-cert.pub

    # Verify the SSH host keys
    - ssh-keyscan ${DEPLOY_HOST} >> ~/.ssh/known_hosts
    - chmod 0644 ~/.ssh/known_hosts

    # Create password file and assign to ANSIBLE_VAULT_PASSWORD_FILE
    - vault kv get -field=password ${VAULT_ANSIBLE_ENDPOINT}${DEPLOY_ENVIRONMENT} > /tmp/.vault_pass
    - export ANSIBLE_VAULT_PASSWORD_FILE=/tmp/.vault_pass

    # Set the remote user for ansible
    - export ANSIBLE_REMOTE_USER=${DEPLOY_USER}

    # Set the private key for ansible
    - export ANSIBLE_PRIVATE_KEY_FILE=~/.ssh/id_ed25519

    # Set the vault id
    - export ANSIBLE_VAULT_ID_MATCH=${DEPLOY_ENVIRONMENT}
  script:
    # Install ansible requirements
    - ansible-galaxy install -g -f -r ansible/roles/requirements.yml

    # Run ansible playbook
    - ansible-playbook --vault-id=${DEPLOY_ENVIRONMENT}@/tmp/.vault_pass -e "ansible_host=${DEPLOY_HOST}" -e "image_tag=${CI_COMMIT_SHORT_SHA}" -i ansible/inventories/${DEPLOY_ENVIRONMENT} ansible/site.yml
  needs:
    - push_prod_app_image_to_registry
    - push_solr_image_to_registry
  tags:
    - deploy

# Deploy staging
deploy_staging:
  <<: *deploy
  stage: deploy
  variables:
    DEPLOY_ENVIRONMENT: staging
  environment:
    name: staging
    url: https://pacscl-staging.library.upenn.edu/
  only:
    - main

# Deploy production
deploy_production:
  <<: *deploy
  stage: deploy
  variables:
    DEPLOY_ENVIRONMENT: production
  environment:
    name: production
    url: https://findingaids.library.upenn.edu/
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+(\.[a-zA-Z0-9]+)?$/
# -- End - deployment

# -- Start - remove images passed through pipeline
remove_tmp_base_app_image_from_host:
  stage: remove:tmp_images_from_host
  extends:
    - .remove_docker_image
  needs:
    - push_base_app_image_to_registry
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-base
  rules:
    - when: always
  tags:
    - build

remove_tmp_app_dev_image_from_host:
  stage: remove:tmp_images_from_host
  extends:
    - .remove_docker_image
  needs:
    - push_dev_app_image_to_registry
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-development
  rules:
    - when: always
  tags:
    - build

remove_tmp_registry_app_dev_image_from_host:
  stage: remove:tmp_images_from_host
  extends:
    - .remove_docker_image
  needs:
    - rspec_app_test
    - rubocop_app_test
  variables:
    CI_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-development
  rules:
    - when: always
  tags:
    - build

remove_tmp_registry_app_prod_image_from_host:
  stage: remove:tmp_images_from_host
  extends:
    - .remove_docker_image
  needs:
    - trivy_app_container_scanning
  variables:
    CI_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-production
  rules:
    - when: always
  tags:
    - build

remove_tmp_app_prod_image_from_host:
  stage: remove:tmp_images_from_host
  extends:
    - .remove_docker_image
  needs:
    - push_prod_app_image_to_registry
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-production
  rules:
    - when: always
  tags:
    - build

remove_tmp_registry_solr_image_from_host:
  stage: remove:tmp_images_from_host
  extends:
    - .remove_docker_image
  needs:
    - trivy_solr_container_scanning
  variables:
    CI_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-solr
  rules:
    - when: always
  tags:
    - build

remove_tmp_solr_image_from_host:
  stage: remove:tmp_images_from_host
  extends:
    - .remove_docker_image
  needs:
    - push_solr_image_to_registry
  variables:
    CI_IMAGE_NAME: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-solr
  rules:
    - when: always
  tags:
    - build
# -- End - remove images passed through pipeline
