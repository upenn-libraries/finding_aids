include:
  - project: "devops/gitlab/ci-templates/docker"
    ref: "multiarch"
    file:
      - ".amend_manifests.yml"
      - ".build_and_push_docker_images.yml"
      - ".copy_docker_images.yml"
      - ".remove_tmp_registry.yml"
  - project: "devops/gitlab/ci-templates/ruby"
    ref: "sans-dind"
    file: 
      - ".rspec.yml"
      - ".rubocop.yml"
  - project: "devops/gitlab/ci-templates/sast"
    ref: "master"
    file:
      - ".trivy_container_scanning.yml"
  - template: "Workflows/MergeRequest-Pipelines.gitlab-ci.yml"

stages:
  - build_and_push:tmp_base_image
  - build_and_push:tmp_dev_image
  - amend_tmp_base_dev_images
  - build_and_push:tmp_solr_image
  - amend_tmp_solr_image
  - test
  - build_and_push:tmp_prod_image
  - amend_prod_image
  - sast
  - copy_docker_images
  - remove_tmp_registry
  - deploy

# -- Start - build and push base image
build_and_push_base_app_image:
  stage: build_and_push:tmp_base_image
  extends:
    - .build_and_push_docker_images
  parallel:
    matrix:
      - RUNNER: build-arm
        DOCKER_BUILD_PLATFORM: "linux/arm64"
      - RUNNER: build
        DOCKER_BUILD_PLATFORM: "linux/amd64"
  variables:
    DOCKER_BUILD_CONTEXT: "ansible/roles/finding_aid_discovery/files/src/"
    DOCKER_TARGET: "base"
    DOCKERFILE_PATH: "ansible/roles/finding_aid_discovery/files/src/"
    REGISTRY_REPOSITORY: "${CI_PIPELINE_ID}/app"
  tags:
    - ${RUNNER}
# -- End - build and push base image

# -- Start - build, push temp dev image
build_and_push_dev_app_image:
  stage: build_and_push:tmp_dev_image
  extends:
    - .build_and_push_docker_images
  parallel:
    matrix:
      - RUNNER: build-arm
        DOCKER_BUILD_PLATFORM: "linux/arm64"
      - RUNNER: build
        DOCKER_BUILD_PLATFORM: "linux/amd64"
  variables:
    BASE_IMAGE_CACHE_TAG: ${CI_COMMIT_SHORT_SHA}-base
    DOCKER_BUILD_ARGS: "--build-arg RAILS_ENV=development"
    DOCKER_BUILD_CONTEXT: "ansible/roles/finding_aid_discovery/files/src/"
    DOCKER_TARGET: "development"
    DOCKERFILE_PATH: "ansible/roles/finding_aid_discovery/files/src/"
    REGISTRY_REPOSITORY: "${CI_PIPELINE_ID}/app"
  needs:
    - build_and_push_base_app_image
  tags:
    - ${RUNNER}
# -- End - build, push temp dev image

amend_tmp_base_dev_images:
  stage: amend_tmp_base_dev_images
  extends:
    - .amend_manifests
  needs:
    - build_and_push_base_app_image
    - build_and_push_dev_app_image
  variables:
    REGISTRY_REPOSITORY: "${CI_PIPELINE_ID}/app"
  tags:
    - build

# -- Start - build and push temp solr image
build_and_push_solr_image:
  stage: build_and_push:tmp_solr_image
  extends:
    - .build_and_push_docker_images
  parallel:
    matrix:
      - RUNNER: build-arm
        DOCKER_BUILD_PLATFORM: "linux/arm64"
      - RUNNER: build
        DOCKER_BUILD_PLATFORM: "linux/amd64"
  variables:
    DOCKER_BUILD_CONTEXT: "ansible/roles/solr/files/src/"
    DOCKERFILE_PATH: "ansible/roles/solr/files/src/"
    REGISTRY_REPOSITORY: "${CI_PIPELINE_ID}/solr"
  tags:
    - ${RUNNER}
# -- End - build and push temp solr image

amend_tmp_solr_image:
  stage: amend_tmp_solr_image
  extends:
    - .amend_manifests
  needs:
    - build_and_push_solr_image
  variables:
    REGISTRY_REPOSITORY: "${CI_PIPELINE_ID}/solr"
  tags:
    - build

# -- Start - test dev image
rspec_app_test:
  stage: test
  image: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}/app:${CI_COMMIT_SHORT_SHA}-development
  services:
    - name: browserless/chrome:1.50-chrome-stable
      alias: chrome
    - postgres:14
    - name: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}/solr:${CI_COMMIT_SHORT_SHA}
      alias: solr
  extends:
    - .rspec
  variables:
    CHROME_URL: "http://chrome:3000"
    CONFIG_LOCATION: "/finding_aid_discovery_configs"
    CORE_NAME: "finding-aid-discovery-core"
    DATABASE_NAME: "finding_aid_discovery"
    DATABASE_PASSWORD: "rspec_test"
    DATABASE_USER: "rspec_test"
    FF_NETWORK_PER_BUILD: "true"
    FINDING_AID_DISCOVERY_URL: "findingaids.test.com"
    POSTGRES_DB: "finding_aid_discovery"
    POSTGRES_PASSWORD: "rspec_test"
    POSTGRES_USER: "rspec_test"
    RAILS_ENV: "test"
    RAILS_SYSTEM_TESTING_SCREENSHOT_HTML: "1"
    SOLR_URL: "http://solr:8983/solr/finding-aid-discovery-core"
  script:
    - cd ${CI_PROJECT_DIR}/ansible/roles/finding_aid_discovery/files/src/
    - bundle add rspec_junit_formatter
    - bundle exec rake db:migrate
    - bundle exec rspec --format progress --format RspecJunitFormatter --out rspec.xml
  needs:
    - amend_tmp_base_dev_images
    - amend_tmp_solr_image
  coverage: '/\(\d+.\d+\%\) covered/'
  artifacts:
    paths:
      - ansible/roles/finding_aid_discovery/files/src/tmp/coverage/index.html
      - ansible/roles/finding_aid_discovery/files/src/tmp/capybara
      - ansible/roles/finding_aid_discovery/files/src/rspec.xml
    expire_in: 1 week
    reports:
      junit: ansible/roles/finding_aid_discovery/files/src/rspec.xml
  rules:
    - if: $DISABLE_RSPEC_TEST == "true"
      when: never
    - exists:
        - ansible/roles/finding_aid_discovery/files/src/spec/**.rb
        - ansible/roles/finding_aid_discovery/files/src/spec/**/**.rb
  tags:
    - build
  allow_failure: true

rubocop_app_test:
  stage: test
  image: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}/app:${CI_COMMIT_SHORT_SHA}-development
  needs:
    - amend_tmp_base_dev_images
  extends:
    - .rubocop
  before_script:
    - cd ansible/roles/finding_aid_discovery/files/src/
  rules:
    - if: $DISABLE_RUBOCOP == "true"
      when: never
    - exists:
        - ansible/roles/finding_aid_discovery/files/src/.rubocop.yml
  tags:
    - build
  allow_failure: true
# -- End - test dev image

# -- Start - build and push temp prod image
build_and_push_prod_app_image:
  stage: build_and_push:tmp_prod_image
  extends:
    - .build_and_push_docker_images
  parallel:
    matrix:
      - RUNNER: build-arm
        DOCKER_BUILD_PLATFORM: "linux/arm64"
      - RUNNER: build
        DOCKER_BUILD_PLATFORM: "linux/amd64"
  variables:
    BASE_IMAGE_CACHE_TAG: ${CI_COMMIT_SHORT_SHA}-base
    DOCKER_BUILD_ARGS: "--build-arg RAILS_ENV=production"
    DOCKER_BUILD_CONTEXT: "ansible/roles/finding_aid_discovery/files/src/"
    DOCKER_TARGET: "production"
    DOCKERFILE_PATH: "ansible/roles/finding_aid_discovery/files/src/"
    REGISTRY_REPOSITORY: "${CI_PIPELINE_ID}/app"
  needs:
    - rspec_app_test
    - rubocop_app_test
  tags:
    - ${RUNNER}
# -- End - build and push temp prod image

amend_prod_image:
  stage: amend_prod_image
  extends:
    - .amend_manifests
  needs:
    - build_and_push_prod_app_image
  variables:
    DOCKER_TARGET: "production"
    REGISTRY_REPOSITORY: "${CI_PIPELINE_ID}/app"
  tags:
    - build

# -- Start - SAST images
# Test application image
trivy_app_container_scanning:
  stage: sast
  extends:
    - .trivy_container_scanning
  before_script:
    - apk add --no-cache docker
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  after_script:
    - docker logout ${CI_REGISTRY}
  needs:
    - amend_prod_image
  variables:
    CI_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}/app:${CI_COMMIT_SHORT_SHA}-production
  tags:
    - build
  allow_failure: true

# Test solr image
trivy_solr_container_scanning:
  stage: sast
  extends:
    - .trivy_container_scanning
  before_script:
    - apk add --no-cache docker
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  after_script:
    - docker logout ${CI_REGISTRY}
  needs:
    - rspec_app_test
  variables:
    CI_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}/solr:${CI_COMMIT_SHORT_SHA}
  tags:
    - build
  allow_failure: true
# -- End - SAST images

# -- Start - Copy app docker images
copy_app_docker_images:
  stage: copy_docker_images
  variables:
    ORIGINAL_REGISTRY_REPOSITORY: "${CI_PIPELINE_ID}/app"
    FINAL_REGISTRY_REPOSITORY: "app"
  needs:
    - trivy_app_container_scanning
  extends:
    - .copy_docker_images
  tags:
    - build
# -- End - Copy app docker images

# -- Start - Copy solr docker images
copy_solr_docker_images:
  stage: copy_docker_images
  variables:
    ORIGINAL_REGISTRY_REPOSITORY: "${CI_PIPELINE_ID}/solr"
    FINAL_REGISTRY_REPOSITORY: "solr"
  needs:
    - trivy_solr_container_scanning
  extends:
    - .copy_docker_images
  tags:
    - build
# -- End - Copy solr docker images

# -- Start - remove tmp registry repository
remove_tmp_registry:
  stage: remove_tmp_registry
  extends:
    - .remove_tmp_registry
  rules:
    - when: always
  needs:
    - copy_app_docker_images
    - copy_solr_docker_images
  allow_failure: true
  tags:
    - build
# -- End - remove tmp registry repository

# -- Start - deployment
.deploy: &deploy
  image: gitlab.library.upenn.edu/docker/hvas:master
  cache: []
  before_script:
    # Create onetime key pair
    - ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -P ""

    # Get Vault token via JWT auth locked to this project
    - export VAULT_ADDR=${VAULT_URL}
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/${CI_SERVER_HOST}/login role=${CI_PROJECT_NAMESPACE}-${CI_PROJECT_NAME}-${DEPLOY_ENVIRONMENT} jwt=${CI_JOB_JWT})"

    # Generate signed key and write to a new pub key
    - vault write -field=signed_key ${VAULT_SSH_CLIENT_ENDPOINT}/sign/${VAULT_SSH_CLIENT_ROLE} public_key=@${HOME}/.ssh/id_ed25519.pub valid_principals=${VALID_PRINCIPALS} > ~/.ssh/id_ed25519-cert.pub
    - chmod 0400 ~/.ssh/id_ed25519-cert.pub

    # Verify the SSH host keys
    - ssh-keyscan ${DEPLOY_HOST} >> ~/.ssh/known_hosts
    - chmod 0644 ~/.ssh/known_hosts

    # Create password file and assign to ANSIBLE_VAULT_PASSWORD_FILE
    - vault kv get -field=password ${VAULT_ANSIBLE_ENDPOINT}${DEPLOY_ENVIRONMENT} > /tmp/.vault_pass
    - export ANSIBLE_VAULT_PASSWORD_FILE=/tmp/.vault_pass

    # Set the remote user for ansible
    - export ANSIBLE_REMOTE_USER=${DEPLOY_USER}

    # Set the private key for ansible
    - export ANSIBLE_PRIVATE_KEY_FILE=~/.ssh/id_ed25519

    # Set the vault id
    - export ANSIBLE_VAULT_ID_MATCH=${DEPLOY_ENVIRONMENT}
  script:
    # Install ansible requirements
    - ansible-galaxy install -g -f -r ansible/roles/requirements.yml

    # Run ansible playbook
    - ansible-playbook --vault-id=${DEPLOY_ENVIRONMENT}@/tmp/.vault_pass -e "ansible_host=${DEPLOY_HOST}" -e "image_tag=${CI_COMMIT_SHORT_SHA}-production" -i ansible/inventories/${DEPLOY_ENVIRONMENT} ansible/site.yml
  needs:
    - copy_app_docker_images
    - copy_solr_docker_images
  tags:
    - deploy

# Deploy staging
deploy_staging:
  <<: *deploy
  stage: deploy
  variables:
    DEPLOY_ENVIRONMENT: staging
  environment:
    name: staging
    url: https://pacscl-staging.library.upenn.edu/
  only:
    - main

# Deploy production
deploy_production:
  <<: *deploy
  stage: deploy
  variables:
    DEPLOY_ENVIRONMENT: production
  environment:
    name: production
    url: https://findingaids.library.upenn.edu/
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+(\.[a-zA-Z0-9]+)?$/
# -- End - deployment
