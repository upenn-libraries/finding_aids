<%= render 'previous_next_doc' if @search_context && search_session['document_id'] == @document.id %>

<% @page_title = t('blacklight.search.show.title', document_title: Deprecation.silence(Blacklight::BlacklightHelperBehavior) { document_show_html_title }, application_name: application_name).html_safe %>
<% content_for(:head) { render_link_rel_alternates } %>

<%= render (blacklight_config.view_config(:show).document_component || Blacklight::DocumentComponent).new(
  presenter: document_presenter(@document),
  component: :div,
  title_component: :h1,
  show: true) do |component| %>
  <% component.footer do %>
    <% if @document.respond_to?(:export_as_openurl_ctx_kev) %>
      <span class="Z3988" title="<%= @document.export_as_openurl_ctx_kev(Deprecation.silence(Blacklight::RenderPartialsHelperBehavior) { document_partial_name(@document) }) %>"></span>
    <% end %>
  <%  end %>

  <% SolrDocument::ParsedEad::OTHER_SECTIONS.each do |section| %>
    <% component.collapsable_metadata_section(title: I18n.t(section, scope: :sections)) do %>
      <%= render AdditionalMetadataComponent.new(nodes: @document.parsed_ead.try(section)) %>
    <% end %>
  <% end %>

  <% component.collapsable_metadata_section(title: t('sections.topics')) do %>
    <%=  render TopicsComponent.new topics: @document.topics_hash %>
  <% end %>

  <% component.collapsable_metadata_section(title: t('sections.admin_info')) do %>
    <%= render AdministrativeInformationComponent.new sections: SolrDocument::ParsedEad::ADMIN_INFO_SECTIONS, document: @document %>
  <% end %>

  <% component.collection_inventory do %>
    <% if @document.requestable? %>
      <form class="form" action="<%= new_request_path %>" method="GET">
        <div class="sticky-top bg-light p-4 mb-3">
          <div id="requestingInfo" class="row justify-content-between">
            <div class="col-sm-12 col-md-8">
              <strong>Request to View Materials</strong>
              <p class="instructions">Materials can be requested by first <%= link_to 'logging in to Aeon', AeonRequest::AEON_URL, class: 'ext', target: '_blank', rel: 'noopener' %>. Then, click on the ADD button next
                to any containers you wish to request. When complete, click the Request button.</p>
            </div>
            <div class="col-sm-12 col-md-2 align-self-center">
              <input id="submit-request" type="submit" value="Request" class="btn btn-primary" disabled>
            </div>
          </div>
        </div>
        <%= render CollectionsComponent.new(node: @document.parsed_ead.dsc, level: 1, requestable: true) %>
        <input type="hidden" name="call_num" value="<%= @document.requesting_info[:call_num] %>">
        <input type="hidden" name="repository" value="<%= @document.requesting_info[:repository] %>">
        <input type="hidden" name="title" value="<%= @document.requesting_info[:title] %>">
      </form>
    <% else %>
      <%= render(CollectionsComponent.new(node: @document.parsed_ead.dsc, requestable: @document.requestable? ,level: 1)) %>
    <% end %>
  <% end %>

  <%# Use :body for complete backwards compatibility (overriding the component body markup),
        but if the app explicitly  opted-in to components, make the partials data available as :partials to ease migrations pain %>
  <% component.public_send(blacklight_config.view_config(:show).document_component.blank? && blacklight_config.view_config(:show).partials.any? ? :body : :partial) do %>
    <div id="doc_<%= @document.id.to_s.parameterize %>">
      <%= render_document_partials @document, blacklight_config.view_config(:show).partials, component: component %>
    </div>
  <% end %>
<% end %>
